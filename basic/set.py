A = {1, 2, 3}
B = set([2, 3, 4])
C = A.union(B)  # {1, 2, 3, 4}
C = A | B # A와 B의 합집합 A ∪ B
D = A.intersection(B)  # {2, 3}
D = A & B # A와 B의 교집합 A ∩ B
E = A.difference(B)  # {1}
E = A - B # A와 B의 차집합 A - B
F = A.symmetric_difference(B)  # {1, 4}
F = A ^ B # A와 B의 대칭 차집합 (A - B) ∪ (B - A)
# 1. 데이터 유형의 다양성
# 2. 중복 데이터 제거
# 3. 데이터 연산을 통한 통찰력 획득
# 4. 차집합을 통해 데이터 버전 관리

# 우리는 앞으로 집합을 정의하고, 집합의 정의역을 정의하고, 집합의 연산을 정의할 것이다.
# 이는 데이터를 다루는 데 있어서 중요한 개념이다.
# 집합은 데이터의 중복을 제거하고, 데이터의 연산을 통해 통찰력을 얻을 수 있게 해준다.
# 집합의 연산은 데이터 버전 관리에도 유용하다.
# 집합은 데이터 유형의 다양성을 제공한다.
# 집합은 중복 데이터를 제거한다.
# 집합은 데이터 연산을 통해 통찰력을 얻을 수 있다.

# 현재와 미래의 데이터 버전을 비교하고, 차이점을 찾아내는 데 집합 연산을 사용할 수 있다
# 고객은 지금 우리에게 무엇을 원하는가
# 고객은 미래에 우리에게 무엇을 원할 것인가
# 우리는 고객을 만족시키고 있는가
# 이는 데이터를 다루는 데 있어서 중요한 질문이다.
# 차이 분석을 통해 현재와 미래의 데이터 버전을 비교하고, 차이점을 찾아낼 수 있다.
# 집합 연산을 사용하여 데이터 버전 관리를 할 수 있다.




